{
  "name": "Web Scrap Agent (final)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1296,
        -464
      ],
      "id": "0757388f-5ff8-4676-aa8b-762b93aa3b6d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://www.wadhefa.com/news.php",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        -304
      ],
      "id": "37d36262-6178-4e42-b01c-f6c963beec34",
      "name": "Fetch News List"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Start Now",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are very good at scraping websites data.\nuser input will be like: Start now.\nUse this link \"{{ $('Titles').item.json.link }}\" to Extract the Exact job details as it is like:\n  - title\n  – description\n  – job link\n  – image link\n  – post date\n  - Automatic categorization (sector, city, type, etc.)\nUse the \"Search\" tool.\nThen Rewrite the following job posting in Arabic with 100% original wording (0% copied).\n- Style: direct and clear job announcement.\n- Length: 400–550 words.\n- Structure:\n- Start immediately after the title with a short announcement sentence, e.g. \"أعلنت شركة [company] عن ...\" or \"أعلنت [entity] عن توفر ...\".\n- If multiple job titles are listed → create a section \"الوظائف المتاحة\".\n- If only required specializations are listed → create a section \"التخصصات المطلوبة\".\n- If neither is mentioned → skip this section.\n- If program/job duration is provided → add a section \"مدة البرنامج\" or \"نوع الوظيفة\".\n- If benefits are provided → list them under \"المزايا\".\n- If conditions/requirements are provided → list them under \"الشروط\".\n- If application dates are provided → add a section \"مواعيد التقديم\".\n- If no end date is mentioned → write: \"التقديم مستمر حتى الاكتفاء بالعدد المطلوب\".\n- Always end with \"طريقة التقديم\" and place only the provided apply_url there.\n- If there are extra details (e.g., location, training info, preferred qualifications), create new sections with suitable headings.\nTitle Rules:\n- Rewrite job_title and seo_title (never copy source).\n- Must be ≤60 characters, include the focus keyword, and attractive (e.g., \"وظائف [company] 2025 – فرص لحملة [degree]\").\nMeta Rules:\n- meta_description ≤160 characters, must include the focus keyword.\nOther rules:\n- Keep facts (salary, dates, conditions) exactly as in the source but fully rephrased.\n- Do not invent details not present.\n- Use <h2>, <p>, <ul><li> for structure.\n- Do not add any extra links or advice.\n "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        176,
        -608
      ],
      "id": "c220138f-677d-4ae9-be12-1e106d42bb8b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "maxTokens": 1600,
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        112,
        -288
      ],
      "id": "2fa22517-2673-4b99-829a-2257daeea203",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vh4TCBgJ8tQNj6xl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"job_details\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"title\": {\n          \"type\": \"string\",\n          \"description\": \"Job announcement title\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"Full job description, tasks, qualifications, and application method\"\n        },\n        \"job_link\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"description\": \"Application or job link\"\n        },\n        \"image\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"description\": \"Image/logo URL for the job post\"\n        },\n        \"post_date\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"description\": \"Posting date in YYYY-MM-DD format\"\n        },\n        \"automatic_categorization\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"sector\": {\n              \"type\": \"string\",\n              \"description\": \"Sector or category of the job (e.g., وظائف مدنية)\"\n            },\n            \"city\": {\n              \"type\": \"string\",\n              \"description\": \"City where the job is located\"\n            },\n            \"type\": {\n              \"type\": \"string\",\n              \"description\": \"Employment type (e.g., Full-time, Part-time)\"\n            }\n          },\n          \"required\": [\"sector\", \"city\", \"type\"]\n        }\n      },\n      \"required\": [\"title\", \"description\", \"job_link\", \"post_date\"]\n    }\n  },\n  \"required\": [\"job_details\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        384,
        -288
      ],
      "id": "d300edfe-dfa0-4dbb-a966-62dc467f419c",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        272,
        -288
      ],
      "id": "5e9ca30a-9916-4391-afa3-98be0f3dfbf2",
      "name": "Search"
    },
    {
      "parameters": {
        "url": "={{ $json.output.job_details.image }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        576,
        -608
      ],
      "id": "38d8c7d8-d873-4f79-b71b-16f607e592a8",
      "name": "Download Image"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://atniwazifa.com/wp-json/wp/v2/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Disposition",
              "value": "=attachment; filename=\"photo.png\""
            },
            {
              "name": "authorization",
              "value": " Basic YXNhbC5tanJiMUBnbWFpbC5jb206dFJCZyBEMUc2IFRFSFEgRzd2MiBnMGMxIEswbG8="
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        736,
        -608
      ],
      "id": "63da30fe-cf03-4f60-b660-222937c57f0b",
      "name": "Upload Image"
    },
    {
      "parameters": {
        "title": "={{ $('Download Image').item.json.output.job_details.title }}",
        "additionalFields": {
          "content": "={{ $('Download Image').item.json.output.job_details.description }}"
        }
      },
      "type": "n8n-nodes-base.wordpress",
      "typeVersion": 1,
      "position": [
        576,
        -320
      ],
      "id": "0904324b-a2e7-4b40-bee0-45bf0256319f",
      "name": "Create a post",
      "credentials": {
        "wordpressApi": {
          "id": "VPgFD4AOrl4o7tLC",
          "name": "Wordpress account"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://atniwazifa.com/wp-json/wp/v2/posts/{{ $json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "wordpressApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"featured_media\": {{ $node[\"Upload Image\"].json.id }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        736,
        -320
      ],
      "id": "80dc5135-ed7b-4a5d-9301-84651386b097",
      "name": "Update Post Featured Image",
      "credentials": {
        "wordpressApi": {
          "id": "VPgFD4AOrl4o7tLC",
          "name": "Wordpress account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node\n// Input:  item.json.data (or item.data) contains the HTML\n// Output: { json: { link: \"<absolute url>/\", title: \"<job title>\" } }\n\nconst BASE = 'https://www.ewdifh.com';\n\nfunction normalizeUrl(href) {\n  if (!href) return null;\n  if (/^https?:\\/\\//i.test(href)) return href;\n  if (href.startsWith('//')) return 'https:' + href;\n  if (href.startsWith('/')) return BASE + href;\n  return BASE + '/' + href.replace(/^\\.?\\//, '');\n}\n\n// Ensure a trailing slash before any query/hash\nfunction ensureTrailingSlash(u) {\n  if (!u) return u;\n  const path = (u.match(/^[^?#]+/) || [u])[0];\n  const rest = u.slice(path.length); // ?query / #hash / both\n  return (path.endsWith('/') ? path : path + '/') + rest;\n}\n\nfunction stripTags(s) {\n  return s.replace(/<[^>]*>/g, '');\n}\n\nfunction decodeEntities(s) {\n  if (!s) return s;\n  s = s.replace(/&amp;/g, '&')\n       .replace(/&lt;/g, '<')\n       .replace(/&gt;/g, '>')\n       .replace(/&quot;/g, '\"')\n       .replace(/&#39;/g, \"'\");\n  s = s.replace(/&#x([0-9a-f]+);/gi, (_, h) => String.fromCodePoint(parseInt(h, 16)));\n  s = s.replace(/&#(\\d+);/g, (_, d) => String.fromCodePoint(parseInt(d, 10)));\n  return s;\n}\n\nfunction firstJobPost(html) {\n  if (typeof html !== 'string') return { link: null, title: null };\n\n  // Start scanning after the page heading to skip the nav bar\n  let start = html.search(/<h[12][^>]*>[\\s\\S]*?(All\\s*jobs|جميع\\s*الوظائف)[\\s\\S]*?<\\/h[12]>/i);\n  if (start === -1) start = html.indexOf('<main');\n  if (start === -1) start = 0;\n  const slice = html.slice(start);\n\n  // Iterate through anchors and pick the first that looks like a job post\n  const rx = /<a\\b[^>]*?href\\s*=\\s*(['\"])(.*?)\\1[^>]*>([\\s\\S]*?)<\\/a>/gi;\n\n  let m;\n  while ((m = rx.exec(slice))) {\n    const hrefRaw = (m[2] || '').trim();\n    let text = stripTags(m[3] || '').replace(/\\s+/g, ' ').trim();\n\n    // Skip non-content links and tiny/icon links\n    if (!hrefRaw || !text || text.length < 12) continue;\n    if (hrefRaw.startsWith('#') || /^javascript:/i.test(hrefRaw)) continue;\n    if (/\\.(png|jpe?g|webp|svg|gif|css|js|ttf|woff2?)$/i.test(hrefRaw)) continue;\n    if (/\\/(category|tag|page|author|search)\\b/i.test(hrefRaw)) continue;\n\n    // Heuristics that match post pages on ewdifh.com\n    const looksLikePost =\n      /(\\/job[s]?\\/|\\/\\d{4}\\/\\d{2}\\/|\\?p=\\d+|\\/post\\/|-[a-z0-9]{2,}-)/i.test(hrefRaw) ||\n      text.split(' ').length >= 4;\n\n    if (looksLikePost) {\n      const link = ensureTrailingSlash(normalizeUrl(hrefRaw));\n      return { link, title: decodeEntities(text) };\n    }\n  }\n\n  // Fallback\n  return { link: null, title: null };\n}\n\nconst out = $input.all().map(item => {\n  const html = (item.json && item.json.data) ?? item.data ?? '';\n  const { link, title } = firstJobPost(html);\n  return { json: { link, title } };\n});\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        -608
      ],
      "id": "3c39849d-c1ac-4cf7-a506-d834bcd8de95",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://www.ewdifh.com/category/all-jobs",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        -608
      ],
      "id": "abe1f412-42fe-47d9-bb8c-3f7b8f49d059",
      "name": "Get First Web Data"
    },
    {
      "parameters": {
        "url": "https://www.wdeftksa.com/sa/jobs",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1040,
        -464
      ],
      "id": "727b9b5f-dd7c-4ee9-921e-9e464fe128e0",
      "name": "Get Sec Web Data"
    },
    {
      "parameters": {
        "content": "## WEB SCRAPE\n### Search for The First Job \n",
        "height": 576,
        "width": 208,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1104,
        -720
      ],
      "id": "68d5b34c-4274-45f4-a94f-0046ae2227f3",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Code\n### Extract The Required Job Link\n",
        "height": 576,
        "width": 208,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        -720
      ],
      "id": "53ed0cc5-9e82-4048-afa9-e731f0fd5740",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Reading and Rewriting AI\n### Read the Job from the given Link and Re-write with AI and format if for WordPress Post\n",
        "height": 576,
        "width": 448,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        64,
        -720
      ],
      "id": "512c0020-fc3f-4e5e-a49b-f158c6a77513",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Post Handling\n### Create a Draft post for Review or Publish it.",
        "height": 576,
        "width": 368,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        528,
        -720
      ],
      "id": "644b22f8-c43b-4549-bf49-2d20c1743916",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Timer to Trigger the WorkFlow",
        "height": 288,
        "width": 208
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1344,
        -560
      ],
      "id": "6d3fc350-2959-4a75-8477-73df9283883b",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a job title similarity checker. I will give you one job title to check, and a list of existing job titles.\n\nIf the given title means the same or is similar to any of the existing job titles (even if phrased differently), return only \"Yes\". Otherwise, return the original job title exactly.\n\nDo not explain anything. Return only one word or phrase: either \"Yes\" or the original job title.\n\nJob title to check:\n  - {{ $('Titles').item.json.title }}\n\nExisting job titles:\n  - {{ $json['Job Title'][0] }}\n  - {{ $json['Job Title'][1] }}\n  - {{ $json['Job Title'][2] }}\n  - {{ $json['Job Title'][3] }}\n  - {{ $json['Job Title'][4] }}\n  - {{ $json['Job Title'][5] }}\n  - {{ $json['Job Title'][6] }}\n  - {{ $json['Job Title'][7] }}\n  - {{ $json['Job Title'][8] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -576,
        -336
      ],
      "id": "5d70e6ce-8c27-41c0-816e-aad7b13d3c4f",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "vh4TCBgJ8tQNj6xl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Job Title"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -272,
        -608
      ],
      "id": "a6ab7e11-2d58-4df2-bca0-e68c7e5b4777",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "290d6951-bb7e-434e-83de-38ed1cde0fc9",
              "leftValue": "={{ $json.message.content }}",
              "rightValue": "Yes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -272,
        -336
      ],
      "id": "d9141b88-2641-4dca-86d4-d73cdc097aef",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Parse only the NEWS table rows on https://www.wadhefa.com/news.php\nconst html = $json.data || \"\";\n\n// Grab every <tr> that contains a link to /news/NNNN/\nconst rowRegex = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\nconst rows = [];\nlet m;\nwhile ((m = rowRegex.exec(html)) !== null) {\n  const tr = m[1];\n  if (/href=[\"'](?:https?:\\/\\/www\\.wadhefa\\.com)?\\/news\\/\\d+\\/[\"']/.test(tr)) {\n    rows.push(tr);\n  }\n}\n\n// Map rows → {title, link, postDate, org, visits}\nconst items = rows.map(tr => {\n  // title + link from the \"News title\" column\n  const a = tr.match(/<a[^>]+href=[\"']([^\"']+)[\"'][^>]*>([\\s\\S]*?)<\\/a>/i);\n  const rel = a ? a[1] : \"\";\n  const titleRaw = a ? a[2] : \"\";\n  const title = titleRaw.replace(/<[^>]+>/g, \"\").replace(/\\s+/g, \" \").trim();\n  const link = rel.startsWith(\"http\") ? rel : `https://www.wadhefa.com${rel}`;\n\n  // post date (last column), e.g. 20/08/2025\n  const dateMatch = tr.match(/(\\d{2}\\/\\d{2}\\/\\d{4})/);\n  let postDate = null;\n  if (dateMatch) {\n    const [d, m, y] = dateMatch[1].split(\"/\");\n    postDate = `${y}-${m}-${d}`;\n  }\n\n  // announcing entity & visits (first 2 columns) – optional\n  const tds = [...tr.matchAll(/<td[^>]*>([\\s\\S]*?)<\\/td>/gi)].map(x =>\n    x[1].replace(/<[^>]+>/g, \" \").replace(/\\s+/g, \" \").trim()\n  );\n  const visits = tds[0] || null;\n  const org = tds[1] || null;\n\n  return { json: { title, link, postDate, org, visits } };\n});\n\n// Keep only the first (topmost/latest) row for now\nreturn items.slice(0, 1);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        -304
      ],
      "id": "aed0a51c-75c1-4195-81b7-af7bd64f1650",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appMGgcPMw86v6snX",
          "mode": "list",
          "cachedResultName": "Posts Info Storage Base",
          "cachedResultUrl": "https://airtable.com/appMGgcPMw86v6snX"
        },
        "table": {
          "__rl": true,
          "value": "tblbwo7QceCXKpeiv",
          "mode": "list",
          "cachedResultName": "Post info",
          "cachedResultUrl": "https://airtable.com/appMGgcPMw86v6snX/tblbwo7QceCXKpeiv"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Job Title": "={{ $json.message.content }}"
          },
          "matchingColumns": [
            "Job Title"
          ],
          "schema": [
            {
              "id": "Job Title",
              "displayName": "Job Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -64,
        -608
      ],
      "id": "b2ee8554-ae29-4774-9a5a-488ca0e60bad",
      "name": "Create a record",
      "credentials": {
        "airtableTokenApi": {
          "id": "0MrIIAdREiCQ8YeS",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node\n// Input:  item.json.data (or item.data) contains the HTML\n// Output: { json: { link: \"<absolute url>/\", title: \"<job title>\" } }\n\nconst BASE = 'https://www.ewdifh.com';\n\nfunction normalizeUrl(href) {\n  if (!href) return null;\n  if (/^https?:\\/\\//i.test(href)) return href;\n  if (href.startsWith('//')) return 'https:' + href;\n  if (href.startsWith('/')) return BASE + href;\n  return BASE + '/' + href.replace(/^\\.?\\//, '');\n}\n\n// Ensure a trailing slash before any query/hash\nfunction ensureTrailingSlash(u) {\n  if (!u) return u;\n  const path = (u.match(/^[^?#]+/) || [u])[0];\n  const rest = u.slice(path.length); // ?query / #hash / both\n  return (path.endsWith('/') ? path : path + '/') + rest;\n}\n\nfunction stripTags(s) {\n  return s.replace(/<[^>]*>/g, '');\n}\n\nfunction decodeEntities(s) {\n  if (!s) return s;\n  s = s.replace(/&amp;/g, '&')\n       .replace(/&lt;/g, '<')\n       .replace(/&gt;/g, '>')\n       .replace(/&quot;/g, '\"')\n       .replace(/&#39;/g, \"'\");\n  s = s.replace(/&#x([0-9a-f]+);/gi, (_, h) => String.fromCodePoint(parseInt(h, 16)));\n  s = s.replace(/&#(\\d+);/g, (_, d) => String.fromCodePoint(parseInt(d, 10)));\n  return s;\n}\n\nfunction firstJobPost(html) {\n  if (typeof html !== 'string') return { link: null, title: null };\n\n  // Start scanning after the page heading to skip the nav bar\n  let start = html.search(/<h[12][^>]*>[\\s\\S]*?(All\\s*jobs|جميع\\s*الوظائف)[\\s\\S]*?<\\/h[12]>/i);\n  if (start === -1) start = html.indexOf('<main');\n  if (start === -1) start = 0;\n  const slice = html.slice(start);\n\n  // Iterate through anchors and pick the first that looks like a job post\n  const rx = /<a\\b[^>]*?href\\s*=\\s*(['\"])(.*?)\\1[^>]*>([\\s\\S]*?)<\\/a>/gi;\n\n  let m;\n  while ((m = rx.exec(slice))) {\n    const hrefRaw = (m[2] || '').trim();\n    let text = stripTags(m[3] || '').replace(/\\s+/g, ' ').trim();\n\n    // Skip non-content links and tiny/icon links\n    if (!hrefRaw || !text || text.length < 12) continue;\n    if (hrefRaw.startsWith('#') || /^javascript:/i.test(hrefRaw)) continue;\n    if (/\\.(png|jpe?g|webp|svg|gif|css|js|ttf|woff2?)$/i.test(hrefRaw)) continue;\n    if (/\\/(category|tag|page|author|search)\\b/i.test(hrefRaw)) continue;\n\n    // Heuristics that match post pages on ewdifh.com\n    const looksLikePost =\n      /(\\/job[s]?\\/|\\/\\d{4}\\/\\d{2}\\/|\\?p=\\d+|\\/post\\/|-[a-z0-9]{2,}-)/i.test(hrefRaw) ||\n      text.split(' ').length >= 4;\n\n    if (looksLikePost) {\n      const link = ensureTrailingSlash(normalizeUrl(hrefRaw));\n      return { link, title: decodeEntities(text) };\n    }\n  }\n\n  // Fallback\n  return { link: null, title: null };\n}\n\nconst out = $input.all().map(item => {\n  const html = (item.json && item.json.data) ?? item.data ?? '';\n  const { link, title } = firstJobPost(html);\n  return { json: { link, title } };\n});\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        -464
      ],
      "id": "4bd67637-dd3b-412d-b29d-0070cfdbf746",
      "name": "Code3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "de6d9389-5dea-4f40-805b-28543de2b227",
              "name": "link",
              "value": "={{ $json.link }}",
              "type": "string"
            },
            {
              "id": "9e5b8fe9-ca71-472b-9547-701e3889003b",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -608,
        -608
      ],
      "id": "89a2d049-e267-40be-937b-0c11d29985c2",
      "name": "Titles"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appMGgcPMw86v6snX",
          "mode": "list",
          "cachedResultName": "Posts Info Storage Base",
          "cachedResultUrl": "https://airtable.com/appMGgcPMw86v6snX"
        },
        "table": {
          "__rl": true,
          "value": "tblbwo7QceCXKpeiv",
          "mode": "list",
          "cachedResultName": "Post info",
          "cachedResultUrl": "https://airtable.com/appMGgcPMw86v6snX/tblbwo7QceCXKpeiv"
        },
        "returnAll": false,
        "limit": 9,
        "options": {},
        "sort": {
          "property": [
            {
              "field": "Created at",
              "direction": "desc"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -432,
        -608
      ],
      "id": "70ac01ee-af0f-43bc-94c9-6df08924d5f4",
      "name": "Search records",
      "credentials": {
        "airtableTokenApi": {
          "id": "0MrIIAdREiCQ8YeS",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Search\n### Searching For Similar Jobs",
        "height": 576,
        "width": 688,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -640,
        -720
      ],
      "id": "8c2ed6c0-5b78-4e6f-88c9-12ada626fa4d",
      "name": "Sticky Note5"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch News List",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Sec Web Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get First Web Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch News List": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Download Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image": {
      "main": [
        [
          {
            "node": "Upload Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Image": {
      "main": [
        [
          {
            "node": "Create a post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a post": {
      "main": [
        [
          {
            "node": "Update Post Featured Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get First Web Data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sec Web Data": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Titles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Create a record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Titles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a record": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Titles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Titles": {
      "main": [
        [
          {
            "node": "Search records",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search records": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e55f30a6-67b0-4ace-87a7-a98c15a10063",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "afc947d330357d2fd0f8345ac77ea7d19f1a80baa010b1a9871e225c2a927d79"
  },
  "id": "2TWUpdH8FvBKsgNc",
  "tags": []
}